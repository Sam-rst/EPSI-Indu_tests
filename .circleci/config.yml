# .circleci/config.yml
version: 2.1

orbs:
  node: circleci/node@5 # Utilisation de l'orbe Node pour simplifier la gestion de l'exécuteur et des dépendances.

jobs:
  build:
    executor: node/default
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: npm
      - run:
          name: Install dependencies
          command: npm install --save
      - run:
          name: Run linter
          command: npm run lint
      - run:
          name: Clean and package
          command: echo "Cleaning and packaging..."

  tests:
    executor: node/default
    environment:
      JEST_JUNIT_OUTPUT_DIR: ./test-results/
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: npm
      - run:
          command: npm install jest-junit
      - run:
          name: Run unit tests
          command: npm run test:ci
      - store_test_results:
          path: ./test-results/
      - run:
          name: Run integration tests
          command: echo "Running integration tests..."
      - run:
          name: Run regression tests
          command: echo "Running regression tests..."
      - run:
          name: Run performance tests
          command: echo "Running performance tests..."
      - run:
          name: Run security tests
          command: echo "Running security tests..."
      - run:
          name: Run compatibility tests
          command: echo "Running compatibility tests..."
      - run:
          name: Run accessibility tests
          command: echo "Running accessibility tests..."

  deploy:
    parameters:
      environment:
        type: string
    executor: node/default
    steps:
      - checkout
      - run:
          name: Prepare Deployment Environment
          command: echo "Preparing deployment for <<parameters.environment>>..."
      - run:
          name: Deploy Application
          command: echo "Deploying application to <<parameters.environment>> environment..."
      - run:
          name: Run Verification Tests
          command: echo "Running verification tests..."
      - run:
          name: Run Functional Validation Tests
          command: echo "Running functional validation tests..."
      - run:
          name: Run Load Tests
          command: echo "Running load tests..."
      - run:
          name: Final Deployment Step
          command: echo "Finalizing deployment to <<parameters.environment>>..."
      - run:
          name: Monitoring and Follow-up
          command: echo "Starting monitoring and follow-up process..."

  should_run_tests:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: Check if last commit is from hotfix
          command: |
            # Vérifier si le dernier commit contient un message indiquant un hotfix
            if git log -1 --pretty=%B | grep -i "hotfix"; then
              echo "Hotfix detected, running tests..."
              echo "export CIRCLE_TESTS_NEEDED=true" >> $BASH_ENV
            else
              echo "No hotfix detected, skipping tests."
              echo "export CIRCLE_TESTS_NEEDED=false" >> $BASH_ENV
            fi
      - run:
          name: Set Pipeline Parameter
          command: echo "Pipeline parameter -> run_tests=$(echo $CIRCLE_TESTS_NEEDED)"



workflows:
  version: 2

  feature:
    jobs:
      - build:
          filters:
            branches:
              only:
                - /^feature\/.*/ # Les branches feature sont dédiées aux nouvelles fonctionnalités et n'ont donc pas besoin d'être déployées
      - tests:
          requires:
            - build
          filters:
            branches:
              only:
                - /^feature\/.*/ # On exécute les tests pour s’assurer que chaque feature est stable avant fusion sur la branche develop

  hotfix:
    jobs:
      - build:
          filters:
            branches:
              only:
                - /^hotfix\/.*/ # Les branches hotfix permettent des corrections critiques directement en production
      - tests:
          requires:
            - build
          filters:
            branches:
              only:
                - /^hotfix\/.*/ # On exécute les tests pour garantir la fiabilité des correctifs avant la fusion sur la branche main

  development:
    jobs:
      - build:
          filters:
            branches:
              only: develop # Branche principale pour le développement continu
      - tests:
          requires:
            - build
          filters:
            branches:
              only: develop # On exécute les tests sur la branche de développement
      - deploy:
          name: deploy_dev
          requires:
            - tests
          filters:
            branches:
              only: develop
          environment: development # Déploiement sur un environnement de dev après validation

  integration:
    jobs:
      - build:
          filters:
            branches:
              only: integration # Branche d'intégration servant de serveur de tests
      - tests:
          requires:
            - build # On exécute des tests complets sur l'environnement d'intégration
      - deploy:
          name: deploy_int
          requires:
            - tests
          filters:
            branches:
              only: integration
          environment: integration # Déploiement dans l’environnement d’intégration pour validation finale

  production:
    jobs:
      - build:
          filters:
            branches:
              only: main

      - should_run_tests:
          requires:
            - build
          filters:
            branches:
              only: main

      - tests:
          requires:
            - should_run_tests
          filters:
            branches:
              only: main
          condition: <<pipeline.parameters.run_tests>> # Exécuter seulement si le hotfix est détecté

      - deploy:
          name: deploy_prod
          requires:
            - build
            - tests
          filters:
            branches:
              only: main
          environment: production

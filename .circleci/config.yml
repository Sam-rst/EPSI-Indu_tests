# .circleci/config.yml
version: 2.1

orbs:
  node: circleci/node@5 # Utilisation de l'orbe Node pour simplifier la gestion de l'exécuteur et des dépendances.

jobs:
# ===========BUILD================ #
  install_dependencies:
    executor: node/default
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: npm
      - run:
          name: Install dependencies
          command: npm install --save

  run_linter:
    executor: node/default
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: npm
      - run:
          name: Run linter
          command: npm run lint

  clean_and_package:
    executor: node/default
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: npm
      - run:
          name: Clean and package
          command: echo "Cleaning and packaging..."

  build:
    executor: node/default
    steps:
      - run:
          name: Orchestrating all build jobs
          command: echo "Build process completed successfully."

# ===========TESTS================ #
  unit_tests:
    executor: node/default
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: npm
      - run:
          name: Install JUnit Reporter
          command: npm install jest-junit
      - run:
          name: Run unit tests
          command: npm run test:ci
      - store_test_results:
          path: ./test-results/

  integration_tests:
    executor: node/default
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: npm
      - run:
          name: Run integration tests
          command: echo "Running integration tests..."

  regression_tests:
    executor: node/default
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: npm
      - run:
          name: Run regression tests
          command: echo "Running regression tests..."

  performance_tests:
    executor: node/default
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: npm
      - run:
          name: Run performance tests
          command: echo "Running performance tests..."

  security_tests:
    executor: node/default
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: npm
      - run:
          name: Run security tests
          command: echo "Running security tests..."

  compatibility_tests:
    executor: node/default
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: npm
      - run:
          name: Run compatibility tests
          command: echo "Running compatibility tests..."

  accessibility_tests:
    executor: node/default
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: npm
      - run:
          name: Run accessibility tests
          command: echo "Running accessibility tests..."

  tests:
    executor: node/default
    steps:
      - run:
          name: Orchestrating all test jobs
          command: echo "Triggering all tests in parallel..."


# ===========DEPLOY================ #
  deploy:
    parameters:
      environment:
        type: string
    executor: node/default
    steps:
      - checkout
      - run:
          name: Prepare Deployment Environment
          command: echo "Preparing deployment for <<parameters.environment>>..."
      - run:
          name: Deploy Application
          command: echo "Deploying application to <<parameters.environment>> environment..."
      - run:
          name: Run Verification Tests
          command: echo "Running verification tests..."
      - run:
          name: Run Functional Validation Tests
          command: echo "Running functional validation tests..."
      - run:
          name: Run Load Tests
          command: echo "Running load tests..."
      - run:
          name: Final Deployment Step
          command: echo "Finalizing deployment to <<parameters.environment>>..."
      - run:
          name: Monitoring and Follow-up
          command: echo "Starting monitoring and follow-up process..."

workflows:
  version: 2

  feature:
    jobs:
      # ===========BUILD================ #
      - install_dependencies
      - run_linter
      - clean_and_package
      - build:
          filters:
            branches:
              only: /^feature\/.*/ # Les branches feature sont dédiées aux nouvelles fonctionnalités et n'ont donc pas besoin d'être déployées
          requires:
            - install_dependencies
            - run_linter
            - clean_and_package

      # ===========TESTS================ #
      - unit_tests:
          requires:
            - build
      - integration_tests:
          requires:
            - build
      - regression_tests:
          requires:
            - build
      - performance_tests:
          requires:
            - build
      - security_tests:
          requires:
            - build
      - compatibility_tests:
          requires:
            - build
      - accessibility_tests:
          requires:
            - build
      - tests:
          requires:
            - unit_tests
            - integration_tests
            - regression_tests
            - performance_tests
            - security_tests
            - compatibility_tests
            - accessibility_tests



  hotfix:
    jobs:
      # ===========BUILD================ #
      - install_dependencies
      - run_linter
      - clean_and_package
      - build:
          filters:
            branches:
              only: /^hotfix\/.*/ # Les branches hotfix permettent des corrections critiques directement en production
          requires:
            - install_dependencies
            - run_linter
            - clean_and_package

      # ===========TESTS================ #
      - unit_tests:
          requires:
            - build
      - integration_tests:
          requires:
            - build
      - regression_tests:
          requires:
            - build
      - performance_tests:
          requires:
            - build
      - security_tests:
          requires:
            - build
      - compatibility_tests:
          requires:
            - build
      - accessibility_tests:
          requires:
            - build

      - tests:
          requires:
            - unit_tests
            - integration_tests
            - regression_tests
            - performance_tests
            - security_tests
            - compatibility_tests
            - accessibility_tests

  development:
    jobs:
      # ===========BUILD================ #
      - install_dependencies
      - run_linter
      - clean_and_package
      - build:
          filters:
            branches:
              only: develop # Branche principale pour le développement continu
          requires:
            - install_dependencies
            - run_linter
            - clean_and_package

      # ===========TESTS================ #
      - unit_tests:
          requires:
            - build
      - integration_tests:
          requires:
            - build
      - regression_tests:
          requires:
            - build
      - performance_tests:
          requires:
            - build
      - security_tests:
          requires:
            - build
      - compatibility_tests:
          requires:
            - build
      - accessibility_tests:
          requires:
            - build

      - tests:
          requires:
            - unit_tests
            - integration_tests
            - regression_tests
            - performance_tests
            - security_tests
            - compatibility_tests
            - accessibility_tests

      - deploy:
          name: deploy_dev
          requires:
            - tests
          environment: development # Déploiement sur un environnement de dev après validation

  integration:
    jobs:
      # ===========BUILD================ #
      - install_dependencies
      - run_linter
      - clean_and_package
      - build:
          filters:
            branches:
              only: integration # Branche d'intégration servant de serveur de tests
          requires:
            - install_dependencies
            - run_linter
            - clean_and_package

      # ===========TESTS================ #
      - unit_tests:
          requires:
            - build
      - integration_tests:
          requires:
            - build
      - regression_tests:
          requires:
            - build
      - performance_tests:
          requires:
            - build
      - security_tests:
          requires:
            - build
      - compatibility_tests:
          requires:
            - build
      - accessibility_tests:
          requires:
            - build

      - tests:
          requires:
            - unit_tests
            - integration_tests
            - regression_tests
            - performance_tests
            - security_tests
            - compatibility_tests
            - accessibility_tests

      - deploy:
          name: deploy_int
          requires:
            - tests
          filters:
            branches:
              only: integration
          environment: integration # Déploiement dans l’environnement d’intégration pour validation finale

  production:
    # La production exécute tous les jobs, de base ce qui était prévu de faire c'est de ne pas exécuter les tests pour accélérer le déploiement.
    # Cependant, sur Circle CI, je ne peux pas dire d'exécuter les tests lorsque le merge vient exclusivement d'une branche hotfix, pour respecter le pattern GitFlow.
    # Donc je me résigne à effectuer les tests sur la branche main. Le mieux, serait de faire un protocole spécifique de tests pour chaque workflow.
    jobs:
    # ===========BUILD================ #
      - install_dependencies
      - run_linter
      - clean_and_package
      - build:
          filters:
            branches:
              only: main # Déploiement en production sur la branche main
          requires:
            - install_dependencies
            - run_linter
            - clean_and_package

      # ===========TESTS================ #
      - unit_tests:
          requires:
            - build
      - integration_tests:
          requires:
            - build
      - regression_tests:
          requires:
            - build
      - performance_tests:
          requires:
            - build
      - security_tests:
          requires:
            - build
      - compatibility_tests:
          requires:
            - build
      - accessibility_tests:
          requires:
            - build

      - tests:
          requires:
            - unit_tests
            - integration_tests
            - regression_tests
            - performance_tests
            - security_tests
            - compatibility_tests
            - accessibility_tests

      - deploy:
          name: deploy_prod
          requires:
            - tests # Directement après la construction, on déploie
          environment: production # Déploiement final sans tests pour optimiser la mise en production

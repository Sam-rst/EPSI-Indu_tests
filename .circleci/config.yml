# Configuration CircleCI
version: 2.1

# Utilisation de l'orb officiel Node.js pour simplifier la configuration
orbs:
  node: circleci/node@5

# Définition des jobs
jobs:
  build:
    executor: node/default  # Utilisation de l'exécuteur par défaut pour Node.js
    steps:
      - checkout  # Récupération du code source
      - node/install-packages:
          pkg-manager: npm  # Installation des dépendances avec npm
      - run:
          name: Install dependencies
          command: npm install --save  # Installation manuelle des dépendances
      - run:
          name: Run linter
          command: npm run lint  # Exécution de l'analyse statique du code
      - run:
          name: Clean and package
          command: echo "Cleaning and packaging..."  # Étape placeholder pour le packaging

  tests:
    executor: node/default
    environment:
      JEST_JUNIT_OUTPUT_DIR: ./test-results/  # Définition du répertoire de sortie des résultats de test
    steps:
      - checkout  # Récupération du code source
      - node/install-packages:
          pkg-manager: npm  # Installation des dépendances avec npm
      - run:
          command: npm install jest-junit  # Installation du package Jest JUnit pour les rapports de test
      - run:
          name: Run unit tests
          command: npm run test:ci  # Exécution des tests unitaires en mode CI
      - store_test_results:
          path: ./test-results/  # Sauvegarde des résultats de test
      
      # Différents types de tests à exécuter
      - run:
          name: Run integration tests
          command: echo "Running integration tests..."
      - run:
          name: Run regression tests
          command: echo "Running regression tests..."
      - run:
          name: Run performance tests
          command: echo "Running performance tests..."
      - run:
          name: Run security tests
          command: echo "Running security tests..."
      - run:
          name: Run compatibility tests
          command: echo "Running compatibility tests..."
      - run:
          name: Run accessibility tests
          command: echo "Running accessibility tests..."

  deploy:
    parameters:
      environment:
        type: string  # Définition de l'environnement cible du déploiement (dev, integration, prod...)
    executor: node/default
    steps:
      - checkout  # Récupération du code source
      - run:
          name: Prepare Deployment Environment
          command: echo "Preparing deployment for <<parameters.environment>>..."
      - run:
          name: Deploy Application
          command: echo "Deploying application to <<parameters.environment>> environment..."
      - run:
          name: Run Verification Tests
          command: echo "Running verification tests..."
      - run:
          name: Run Functional Validation Tests
          command: echo "Running functional validation tests..."
      - run:
          name: Run Load Tests
          command: echo "Running load tests..."
      - run:
          name: Final Deployment Step
          command: echo "Finalizing deployment to <<parameters.environment>>..."
      - run:
          name: Monitoring and Follow-up
          command: echo "Starting monitoring and follow-up process..."

# Définition des workflows
workflows:
  version: 2

  feature: # Pas besoin de déploiement pour les branches feature
    jobs:
      - build:
          filters:
            branches:
              only:
                - /^feature\/.*/  # Déclenchement du build uniquement pour les branches feature
      - tests:
          requires:
            - build  # Exécution des tests après la compilation

  hotfix: # Pas besoin de déploiement pour les branches hotfix
    jobs:
      - build:
          filters:
            branches:
              only:
                - /^hotfix\/.*/  # Déclenchement du build uniquement pour les branches hotfix
      - tests:
          requires:
            - build

  development: # Besoin d'un déploiement sur vercel pour la branche develop
    jobs:
      - build:
          filters:
            branches:
              only: develop  # Déclenchement du build uniquement sur la branche develop
      - tests:
          requires:
            - build
          filters:
            branches:
              only: develop
      - deploy:
          name: deploy_dev
          requires:
            - tests  # Déploiement en dev après la réussite des tests
          environment: development

  integration: # Besoin d'un déploiement pour la branche integration
    jobs:
      - build:
          filters:
            branches:
              only: integration  # Déclenchement du build uniquement sur la branche integration
      - tests:
          requires:
            - build
      - deploy:
          name: deploy_int
          requires:
            - tests
          environment: integration

  production: # Besoin d'un déploiement pour la branche main
    jobs:
      - build:
          filters:
            branches:
              only: main  # Déclenchement du build uniquement sur la branche principale
      - tests:
          requires:
            - build
      - deploy:
          name: deploy_prod
          requires:
            - tests  # Déploiement en production après validation des tests
          environment: production
